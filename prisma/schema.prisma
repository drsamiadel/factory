generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String     @default("user")
  accounts      Account[]
  sessions      Session[]
  suppliers     Supplier[]
  customers     Customer[]
  delegates     Delegate[]
  inputs        Input[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Material  Material[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Supplier {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  companyName String?
  managerName String?
  vatNumber   String?
  crNumber    String?
  phone1      String?
  phone2      String?
  fax         String?
  email       String?
  address     String?
  location    String?
  dealingType String  @default("cash")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Material  Material[]

  @@map("suppliers")
}

model Customer {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  companyName String?
  managerName String?
  vatNumber   String?
  crNumber    String?
  phone1      String?
  phone2      String?
  fax         String?
  email       String?
  address     String?
  location    String?
  dealingType String  @default("cash")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}

model Delegate {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  type        String? @default("freelancer")
  phone1      String?
  phone2      String?
  email       String?
  address     String?
  location    String?
  dealingType String  @default("cash")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("delegates")
}

model Input {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  code      String?
  images    String[]
  structure Json

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("inputs")
}

model Image {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  url String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("images")
}

model Material {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  category        String?
  name            String?
  type            String?
  thickness       Int?
  size            String?
  unit            String?
  piecesInPackage Int?
  packagePrice    Float?
  unitPrice       Float?
  description     String?
  supplierId      String?   @db.ObjectId
  supplier        Supplier? @relation(fields: [supplierId], references: [id])

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("materials")
}
